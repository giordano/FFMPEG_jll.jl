# Autogenerated wrapper script for FFMPEG_jll for x86_64-linux-gnu
export ffmpeg, ffprobe, libavcodec, libavdevice, libavfilter, libavformat, libavresample, libavutil, libpostproc, libswresample, libswscale

using libass_jll
using libfdk_aac_jll
using FriBidi_jll
using FreeType2_jll
using LAME_jll
using libvorbis_jll
using Ogg_jll
using x264_jll
using x265_jll
using Bzip2_jll
using Zlib_jll
using OpenSSL_jll
using Opus_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `ffmpeg`
const ffmpeg_splitpath = ["bin", "ffmpeg"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ffmpeg_path = ""

# ffmpeg-specific global declaration
ffmpeg(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true) =
    executable_wrapper(f, ffmpeg_path, PATH, LIBPATH, LIBPATH_env, LIBPATH_default, adjust_PATH, adjust_LIBPATH, ':')

# Relative path to `ffprobe`
const ffprobe_splitpath = ["bin", "ffprobe"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ffprobe_path = ""

# ffprobe-specific global declaration
ffprobe(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true) =
    executable_wrapper(f, ffprobe_path, PATH, LIBPATH, LIBPATH_env, LIBPATH_default, adjust_PATH, adjust_LIBPATH, ':')

# Relative path to `libavcodec`
const libavcodec_splitpath = ["lib", "libavcodec.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libavcodec_path = ""

# libavcodec-specific global declaration
# This will be filled out by __init__()
libavcodec_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libavcodec = "libavcodec.so.58"


# Relative path to `libavdevice`
const libavdevice_splitpath = ["lib", "libavdevice.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libavdevice_path = ""

# libavdevice-specific global declaration
# This will be filled out by __init__()
libavdevice_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libavdevice = "libavdevice.so.58"


# Relative path to `libavfilter`
const libavfilter_splitpath = ["lib", "libavfilter.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libavfilter_path = ""

# libavfilter-specific global declaration
# This will be filled out by __init__()
libavfilter_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libavfilter = "libavfilter.so.7"


# Relative path to `libavformat`
const libavformat_splitpath = ["lib", "libavformat.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libavformat_path = ""

# libavformat-specific global declaration
# This will be filled out by __init__()
libavformat_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libavformat = "libavformat.so.58"


# Relative path to `libavresample`
const libavresample_splitpath = ["lib", "libavresample.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libavresample_path = ""

# libavresample-specific global declaration
# This will be filled out by __init__()
libavresample_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libavresample = "libavresample.so.4"


# Relative path to `libavutil`
const libavutil_splitpath = ["lib", "libavutil.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libavutil_path = ""

# libavutil-specific global declaration
# This will be filled out by __init__()
libavutil_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libavutil = "libavutil.so.56"


# Relative path to `libpostproc`
const libpostproc_splitpath = ["lib", "libpostproc.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libpostproc_path = ""

# libpostproc-specific global declaration
# This will be filled out by __init__()
libpostproc_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libpostproc = "libpostproc.so.55"


# Relative path to `libswresample`
const libswresample_splitpath = ["lib", "libswresample.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libswresample_path = ""

# libswresample-specific global declaration
# This will be filled out by __init__()
libswresample_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libswresample = "libswresample.so.3"


# Relative path to `libswscale`
const libswscale_splitpath = ["lib", "libswscale.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libswscale_path = ""

# libswscale-specific global declaration
# This will be filled out by __init__()
libswscale_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libswscale = "libswscale.so.5"

initialize_path_list!(PATH_list, (libass_jll.PATH_list, libfdk_aac_jll.PATH_list, FriBidi_jll.PATH_list, FreeType2_jll.PATH_list, LAME_jll.PATH_list, libvorbis_jll.PATH_list, Ogg_jll.PATH_list, x264_jll.PATH_list, x265_jll.PATH_list, Bzip2_jll.PATH_list, Zlib_jll.PATH_list, OpenSSL_jll.PATH_list, Opus_jll.PATH_list,))
initialize_path_list!(LIBPATH_list, (libass_jll.LIBPATH_list, libfdk_aac_jll.LIBPATH_list, FriBidi_jll.LIBPATH_list, FreeType2_jll.LIBPATH_list, LAME_jll.LIBPATH_list, libvorbis_jll.LIBPATH_list, Ogg_jll.LIBPATH_list, x264_jll.LIBPATH_list, x265_jll.LIBPATH_list, Bzip2_jll.LIBPATH_list, Zlib_jll.LIBPATH_list, OpenSSL_jll.LIBPATH_list, Opus_jll.LIBPATH_list,))

"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"FFMPEG")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list

    global ffmpeg_path = get_exe_path!(PATH_list, artifact_dir, ffmpeg_splitpath)
    global ffprobe_path = get_exe_path!(PATH_list, artifact_dir, ffprobe_splitpath)

    global libavcodec_path, libavcodec_handle
    libavcodec_path, libavcodec_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libavcodec_splitpath)

    global libavdevice_path, libavdevice_handle
    libavdevice_path, libavdevice_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libavdevice_splitpath)

    global libavfilter_path, libavfilter_handle
    libavfilter_path, libavfilter_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libavfilter_splitpath)

    global libavformat_path, libavformat_handle
    libavformat_path, libavformat_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libavformat_splitpath)

    global libavresample_path, libavresample_handle
    libavresample_path, libavresample_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libavresample_splitpath)

    global libavutil_path, libavutil_handle
    libavutil_path, libavutil_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libavutil_splitpath)

    global libpostproc_path, libpostproc_handle
    libpostproc_path, libpostproc_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libpostproc_splitpath)

    global libswresample_path, libswresample_handle
    libswresample_path, libswresample_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libswresample_splitpath)

    global libswscale_path, libswscale_handle
    libswscale_path, libswscale_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libswscale_splitpath)

    global PATH, LIBPATH
    PATH, LIBPATH = cleanup_path_libpath!(PATH_list, LIBPATH_list, ':')
    
end  # __init__()
